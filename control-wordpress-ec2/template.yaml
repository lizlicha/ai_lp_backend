AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Lambda Functions to Start and Stop an EC2 Instance

Globals:
  Function:
    Runtime: python3.9
    CodeUri: ./src
    MemorySize: 128
    Timeout: 10
    Environment:
      Variables:
        INSTANCE_ID: 'i-0e84225d6aeb0f165'
        SLACK_WEBHOOK_URL: 'https://hooks.slack.com/services/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'
        
Resources:
  EC2Cron:
    Type: AWS::Serverless::Function
    Properties:
      Handler: cron.lambda_handler
      FunctionName: wordpress_cron
      Description: A Lambda function that starts an EC2 instance.
      Role: !GetAtt LambdaExecutionRole.Arn

  EC2Main:
    Type: AWS::Serverless::Function
    Properties:
      Handler: main.lambda_handler
      FunctionName: wordpress_main
      Description: A Lambda function that starts an EC2 instance.
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        GetEvents:
          Type: Api
          Properties:
            Path: /main
            Method: post
            RestApiId: !Ref ApiGateway

  EC2Starter:
    Type: AWS::Serverless::Function
    Properties:
      Handler: start-ec2.lambda_handler
      Runtime: python3.9
      FunctionName: wordpress_start_ec2
      Description: A Lambda function that starts an EC2 instance.
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        GetEvents:
          Type: Api
          Properties:
            Path: /start
            Method: post
            RestApiId: !Ref ApiGateway

  EC2Stopper:
    Type: AWS::Serverless::Function
    Properties:
      Handler: stop-ec2.lambda_handler
      Runtime: python3.9
      FunctionName: wordpress_end_ec2
      Description: A Lambda function that stops an EC2 instance.
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        GetEvents:
          Type: Api
          Properties:
            Path: /stop
            Method: post
            RestApiId: !Ref ApiGateway

  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      DefinitionBody:
        swagger: "2.0"
        info:
          title: "EC2_Control_API"
          version: "1.0"
        paths:
          /start:
            post:
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EC2Starter.Arn}/invocations
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
          /stop:
            post:
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EC2Stopper.Arn}/invocations
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
          /main:
            post:
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EC2Main.Arn}/invocations
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaEC2Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:StartInstances
                  - ec2:StopInstances
                Resource: "*"
        - PolicyName: LambdaFunctionInvocation
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: "*"
        - PolicyName: LambdaDynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/EC2InstanceState'
        - PolicyName: BasicLambdaExecution
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"

Outputs:
  StarterLambdaFunction:
    Description: "ARN of the Lambda Function to start an EC2 instance"
    Value: !GetAtt EC2Starter.Arn
  StopperLambdaFunction:
    Description: "ARN of the Lambda Function to stop an EC2 instance"
    Value: !GetAtt EC2Stopper.Arn
  ApiGatewayEndpoint:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/"